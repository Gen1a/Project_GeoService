// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_GeoService.Data;

namespace Project_GeoService.Migrations
{
    [DbContext(typeof(Project_GeoServiceContext))]
    [Migration("20210601202425_Project_GeoService")]
    partial class Project_GeoService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project_GeoService.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<double>("Surface")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Project_GeoService.Models.Continent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("Project_GeoService.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContinentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<double>("Surface")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Project_GeoService.Models.CountryCapital", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.HasKey("CountryId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("CountryCapital");
                });

            modelBuilder.Entity("Project_GeoService.Models.CountryRiver", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("RiverId")
                        .HasColumnType("bigint");

                    b.HasKey("CountryId", "RiverId");

                    b.HasIndex("RiverId");

                    b.ToTable("CountryRiver");
                });

            modelBuilder.Entity("Project_GeoService.Models.River", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("River");
                });

            modelBuilder.Entity("Project_GeoService.Models.City", b =>
                {
                    b.HasOne("Project_GeoService.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Project_GeoService.Models.Country", b =>
                {
                    b.HasOne("Project_GeoService.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .HasConstraintName("FK_Country_Continent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("Project_GeoService.Models.CountryCapital", b =>
                {
                    b.HasOne("Project_GeoService.Models.City", "City")
                        .WithMany("CountryCapitals")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CountryCapital_City")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_GeoService.Models.Country", "Country")
                        .WithMany("CountryCapitals")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CountryCapital_Country")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Project_GeoService.Models.CountryRiver", b =>
                {
                    b.HasOne("Project_GeoService.Models.Country", "Country")
                        .WithMany("CountryRivers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CountryRiver_Country")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_GeoService.Models.River", "River")
                        .WithMany("CountryRivers")
                        .HasForeignKey("RiverId")
                        .HasConstraintName("FK_CountryRiver_River")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("River");
                });

            modelBuilder.Entity("Project_GeoService.Models.City", b =>
                {
                    b.Navigation("CountryCapitals");
                });

            modelBuilder.Entity("Project_GeoService.Models.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Project_GeoService.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CountryCapitals");

                    b.Navigation("CountryRivers");
                });

            modelBuilder.Entity("Project_GeoService.Models.River", b =>
                {
                    b.Navigation("CountryRivers");
                });
#pragma warning restore 612, 618
        }
    }
}
